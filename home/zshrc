# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh
ZSH_SCRIPT_DIR=$(dirname $(readlink -f ${HOME}/.zshrc))

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="matt"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(github gitfast zsh-completions)
autoload -U compinit && compinit

source $ZSH/oh-my-zsh.sh

# Setup path properly over ssh
source $HOME/.profile

# support 256 colors
export TERM=xterm-256color

#git uses sublime
export EDITOR="subl -w"

# resume downloads if dc'd
alias wget='wget -c'
alias google='google-chrome'
alias files='xdg-open .'
alias term='gnome-terminal'
alias gdb='gdb -q -ex r'
alias tree='tree -C'
alias woman=man

# some more ls aliases
alias l='ls'
alias la='ls -A'
alias ll='ls -Alh'
alias lt='ls -Alhtr'

# easy zsh move
autoload -U zmv
alias mmv='noglob zmv -W'

alias sl='sl'

# sudo uses aliases
# alias sudo='sudo '

function say() {
    if which cowsay >/dev/null && which lolcat >/dev/null; then
        cowfile=`ls /usr/share/cowsay/cows | sort -R | tail -1`
        cowsay -f $cowfile "$@" | lolcat
        # cowsay -f head-in -e "><" "$@" | cowthink -n -f dragon-and-cow -e "OO" | cowthink -n -s -f bong
    else
        echo $@
    fi
}

alias quote='say `fortune`'
alias bored='while :; do quote && sleep 4; done'
alias lol='say lol'
alias yo='say yo-yo'
alias hey='say oh hai'
alias fart='say pffttbbttbt'

# apt crap
alias install='sudo apt-get install'
alias remove='sudo apt-get remove'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get update && sudo apt-get dist-upgrade'
alias search='apt-cache search'

# more dots
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias size='command du -sh'
alias count='wc -l'

alias shutdown='quote && read && shutdown -h now'
alias reboot='shutdown -r now'
alias logout='gnome-session-quit'

alias zedit='subl ~/.zshrc'
alias zup='source ~/.zshrc'

alias which-package='dpkg-query -S'

function calc() {
    python -c "print $@"
}

# debian
alias dquilt="quilt --quiltrc=${HOME}/.quiltrc-dpkg"

function deb-extract() {
    mkdir -p $2
    dpkg-deb -x $1 $2
    dpkg-deb --control $1 $2/DEBIAN
}

function deb-rebuild() {
    dpkg -b $1 $2
}

function pin-endless() {
    sudo ln -sTf ${ZSH_SCRIPT_DIR}/../apt/obs-endless.pref /etc/apt/preferences.d/obs-custom.pref
}

function pin-watson() {
    sudo ln -sTf ${ZSH_SCRIPT_DIR}/../apt/obs-watson.pref /etc/apt/preferences.d/obs-custom.pref
}

alias m='build-project'
alias r='run-project'
alias mr='m && r'

# pipe to grep
alias -g '@'="| command grep --color=auto"
alias dgrep="dpkg -l | command grep --color=auto"

# add to clipboard
alias clip="xclip -sel clip"

# ls after every cd
function chpwd() {
    emulate -LR zsh
    ls
}

if which hub >/dev/null; then
  alias git=hub
fi

# Git mode! work in progress
function rm_git_mode()
{
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local output
        output=`git rm $@ 2>&1`
        local ret="$?"
        if [ $ret -ne 128 ]; then
            echo $output
            return $ret
        fi
    fi
    command rm "$@"
}
function mv_git_mode()
{
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local output
        output=`git mv $@ 2>&1`
        local ret="$?"
        if [ $ret -ne 128 ]; then
            echo $output
            return $ret
        fi
    fi
    command mv "$@"
}
function alias_git_mode()
{
    local aliases="$(git config --get-regexp '^alias.' | sed s/alias.// | awk '{print $1}')"
    local git_builtins="add am annotate apply archive bisect blame branch bundle cat-file check-attr check-ref-format checkout checkout-index cherry cherry-pick clean clone column commit commit-tree config count-objects credential credential-cache credential-store daemon describe diff diff-files diff-index diff-tree difftool fast-export fast-import fetch fetch-pack filter-branch fmt-merge-msg for-each-ref format-patch fsck fsck-objects gc get-tar-commit-id grep hash-object help http-backend http-fetch http-push imap-send index-pack init init-db instaweb log lost-found ls-files ls-remote ls-tree mailinfo mailsplit merge merge-base merge-file merge-index merge-octopus merge-one-file merge-ours merge-recursive merge-resolve merge-subtree merge-tree mergetool mktag mktree name-rev notes p4 pack-objects pack-redundant pack-refs patch-id peek-remote prune prune-packed pull push quiltimport read-tree rebase receive-pack reflog relink remote remote-ext remote-fd remote-ftp remote-ftps remote-http remote-https remote-testgit remote-testsvn repack replace repo-config request-pull rerere reset rev-list rev-parse revert send-pack sh-i18n--envsubst shell shortlog show show-branch show-index show-ref stage stash status stripspace submodule symbolic-ref tag tar-tree unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-pack verify-tag web--browse whatchanged write-tree"
    _git_mode_commands=(${(ps:\n:)${aliases}} ${(ps: :)${git_builtins}})
    if which hub >/dev/null; then
        local hub_builtins="create browse compare fork pull-request ci-status"
        _git_mode_commands+=(${(ps: :)${hub_builtins}})
    fi
    for word in $_git_mode_commands; do
        alias "$word"="git $word"
    done
    alias mv="mv_git_mode"
    alias rm="rm_git_mode"
}
function unalias_git_mode()
{
    for word in $_git_mode_commands; do
        unalias "$word"
    done
    unalias mv
    unalias rm
}
# toggle git mode or run a single command with git
unalias g
function g()
{
    if [ "$#" -eq 0 ]; then
        if [ $GIT_MODE ]; then
            unset GIT_MODE
            unalias_git_mode
        else
            export GIT_MODE=true
            alias_git_mode
        fi
    else
        git $@
    fi
}
if [ $GIT_MODE ]; then
    alias_git_mode
fi

function j()
{
    if [ "$#" -eq 0 ]; then
        if [[ -z $UNDER_JHBUILD ]]; then
            command jhbuild shell
        else
            exit
        fi
    else
        command jhbuild run $@
    fi
}


typeset -gx -A _zip_mode_commands
typeset -a _zip_mode_completions
for dir in $HOME/checkout/* ; do
    local shortcut=$(basename $dir)
    shortcut=${shortcut#gnome-}
    shortcut=${shortcut#eos-knowledge-}
    shortcut=${shortcut#eos-}
    _zip_mode_commands[$shortcut]=$dir
    _zip_mode_completions+=("$shortcut:go to $dir")
done

# Quick navigate commands
function alias_zip_mode()
{
    for shortcut in ${(@k)_zip_mode_commands}; do
        alias "$shortcut"="cd ${_zip_mode_commands[$shortcut]}"
    done
}
function unalias_zip_mode()
{
    for shortcut in ${(@k)_zip_mode_commands}; do
        unalias "$shortcut"
    done
}

function _z()
{
    _describe 'commands' _zip_mode_completions
}
function z()
{
    if [ "$#" -eq 0 ]; then
        if [ $ZIP_MODE ]; then
            unset ZIP_MODE
            unalias_zip_mode
        else
            export ZIP_MODE=true
            alias_zip_mode
        fi
    else
        cd ${_zip_mode_commands[$1]}
    fi
}
compdef _z z
if [ $ZIP_MODE ]; then
    alias_zip_mode
fi

h() { cd ~/$1; }
_h() { _files -W ~/ -/; }
compdef _h h

alias c="command"

if [ -z $FIRST_INCLUDE ]; then
    export FIRST_INCLUDE=true
    g
    # z
    # j
fi

